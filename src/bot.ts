import TelegramBot from 'node-telegram-bot-api';
import { ScheduleParser } from './services/scheduleParser';
import { NotificationService } from './services/notificationService';
import { UserPreferenceModel } from './models/UserPreference';
import { Schedule, Lesson } from './types';
import { groupMap } from './groupMap';
import { MessageManager } from './services/messageManager';

export class ScheduleBot {
  private bot: TelegramBot;
  private scheduleParser: ScheduleParser;
  private notificationService: NotificationService;
  private messageManager: MessageManager;
  private dateMap: Map<number, Date>;
  private userSelectedDates: Set<number>;
  private readonly mainKeyboard = {
    keyboard: [
      [{ text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" }, { text: "üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É" }],
      [{ text: "üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É" }, { text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" }],
      [{ text: "üë§ –ü—Ä–æ—Ñ–∏–ª—å" }, { text: "üìã –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞" }] 
    ],
    resize_keyboard: true,
    persistent: true
  };

  private botId: number | null = null;
  private botUsername: string | null = null;
  
  constructor(token: string) {
    this.bot = new TelegramBot(token, { 
      polling: {
        interval: 300,
        params: {
          timeout: 30
        }
      }
    });
    this.scheduleParser = new ScheduleParser();
    this.messageManager = new MessageManager();
    this.notificationService = new NotificationService(this.bot, this.messageManager);
    this.dateMap = new Map();
    this.userSelectedDates = new Set();
    
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
   this.bot.getMe().then(botInfo => {
    this.botId = botInfo.id;
    this.botUsername = botInfo.username || null; // –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º undefined –∫ null
    console.log('Bot initialized with ID:', this.botId, 'Username:', this.botUsername);
  });


    this.initializeHandlers();
    this.setupMainMenu();

    this.bot.on('polling_error', (error) => {
      console.error('Polling error:', error.message);
      if (error.message.includes('ETELEGRAM: 409 Conflict')) {
        process.exit(1);
      }
    });
  }
  private async sendBotMessage(chatId: number, text: string, options: any = {}): Promise<void> {
    try {
      // –ï—Å–ª–∏ reply_markup —É–∂–µ –µ—Å—Ç—å –≤ options, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
      // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const messageOptions = {
        parse_mode: 'HTML',
        ...options,
        reply_markup: options.reply_markup || this.mainKeyboard
      };
  
      const message = await this.bot.sendMessage(chatId, text, messageOptions);
      await this.messageManager.addBotMessage(this.bot, chatId, message.message_id);
    } catch (error) {
      console.error('Error sending message:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }


  private setupMainMenu(): void {
    const keyboard = {
      keyboard: [
        [{ text: "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" }, { text: "üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É" }],
        [{ text: "üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É" }, { text: "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" }]
      ],
      resize_keyboard: true,
      persistent: true
    };

    this.bot.setMyCommands([
      { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: '/schedule', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' },
      { command: '/other', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã' },
      { command: '/notifications', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏' },
      { command: '/profile', description: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' },
      { command: '/help', description: '–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞' }
    ]);
  }

  private initializeHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      const userId = msg.from?.id;
      if (!userId) return;

      if (!this.messageManager.shouldProcessCommand(userId)) {
        return;
      }

      if (msg.text) {
        await this.handleMessage(msg);
      }
    });


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
    this.bot.on('new_chat_members', async (msg) => {
      const newMembers = msg.new_chat_members;
      if (!newMembers) return;

      for (const member of newMembers) {
        if (member.id === this.botId) {
          await this.handleStart(msg);
          break;
        }
      }
    });

    this.bot.on('callback_query', this.handleCallbackQuery.bind(this));
  }

  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    const text = msg.text;
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const isGroupChat = msg.chat.type === 'group' || msg.chat.type === 'supergroup';
    const isCommand = text?.startsWith('/');
    const mentionsBot = text && this.botUsername ? text.includes(`@${this.botUsername}`) : false;

    if (!text || !userId) return;

    if (isGroupChat) {
      const isReplyToBot = msg.reply_to_message?.from?.id === this.botId;
      
      if (!isCommand && !mentionsBot && !isReplyToBot) {
        return;
      }

      const cleanText = this.botUsername && mentionsBot
        ? text.replace(`@${this.botUsername}`, '').trim()
        : text.trim();

      switch (cleanText) {
        case '/start':
          await this.handleStart(msg);
          break;
        case '/schedule':
        case 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
          await this.handleSchedule(msg);
          break;
        case '/other':
        case 'üìã –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞':
          await this.handleOtherSchedule(msg);
        break;
        case '/profile':
        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
          await this.handleProfile(msg);
        break;
        case '/notifications':
        case 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
          await this.handleNotifications(msg);
          break;
        case '/help':
          await this.handleHelp(msg);
          break;
        case 'üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É':
          await this.sendDateSelection(chatId);
          break;
        case 'üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É':
          await this.sendGroupSelection(chatId, userId, isGroupChat);
          break;        
        default:
          if (this.isGroupInput(cleanText)) {
            const state = await this.messageManager.getState(chatId);
            if (state === 'awaiting_other_group') {
              await this.handleOtherGroupSchedule(msg, cleanText);
            } else {
              await this.handleGroupInput(msg, cleanText);
            }
          }
      }
    } else {
      switch (text) {
        case '/start':
          await this.handleStart(msg);
          break;
        case '/schedule':
        case 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
          await this.handleSchedule(msg);
          break;
        case '/other':
        case 'üìã –î—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞':
          await this.handleOtherSchedule(msg);
        break;
        case '/profile':
        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            await this.handleProfile(msg);
            break;
        case '/notifications':
        case 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
          await this.handleNotifications(msg);
          break;
        case '/help':
          await this.handleHelp(msg);
          break;
        case 'üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É':
          await this.sendDateSelection(chatId);
          break;
        case 'üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É':
          await this.sendGroupSelection(chatId, userId, isGroupChat);
          break;
        default:
          if (this.isGroupInput(text)) {
            const state = await this.messageManager.getState(chatId);
            if (state === 'awaiting_other_group') {
              await this.handleOtherGroupSchedule(msg, text);
            } else {
              await this.handleGroupInput(msg, text);
            }
          }
      }
    }
  }

  private async handleProfile(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const isGroupChat = msg.chat.type === 'group' || msg.chat.type === 'supergroup';
  
    if (!userId) return;
  
    try {
      const userPref = await UserPreferenceModel.findOne({
        $or: [
          { userId, chatId },
          { groupChatId: chatId }
        ]
      });
  
      if (!userPref) {
        await this.sendBotMessage(
          chatId,
          '‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
        );
        return;
      }
  
      const groupName = Object.entries(groupMap).find(
        ([_, value]) => value === userPref.groupId
      )?.[0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞';
  
      let profileMessage = 'üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n';
      
      if (isGroupChat) {
        profileMessage += 'üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>\n';
      } else {
        profileMessage += 'üìö <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n';
      }
      
      profileMessage += `‚Ä¢ –ì—Ä—É–ø–ø–∞: ${groupName}\n`;
      profileMessage += `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${userPref.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}\n`;
      
      if (isGroupChat) {        
        const isAdmin = await this.isUserAdmin(chatId, userId);
        profileMessage += `‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${isAdmin ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç'}\n`;
      }        
  
      await this.sendBotMessage(chatId, profileMessage, {
        parse_mode: 'HTML'
      });
  
    } catch (error) {
      console.error('Error in handleProfile:', error);
      await this.sendBotMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  private async handleOtherGroupSchedule(msg: TelegramBot.Message, groupName: string): Promise<void> {
    const chatId = msg.chat.id;
    const groupNameNormalized = groupName.toUpperCase();
 
    if (groupMap[groupNameNormalized]) {
        const groupId = groupMap[groupNameNormalized];
        await this.messageManager.setState(chatId, null);
     
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–ª–∏ —Ñ–ª–∞–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            let currentDate = this.userSelectedDates.has(chatId)
                ? (this.dateMap.get(chatId) || new Date())
                : new Date();
            
            let schedule = await this.scheduleParser.fetchSchedule(groupId, currentDate);
            
            // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–ª–∞–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
            if (!this.userSelectedDates.has(chatId) && (!schedule.lessons || schedule.lessons.length === 0)) {
                currentDate = await this.findNextAvailableDay(currentDate, groupId);
                this.dateMap.set(chatId, currentDate);
                schedule = await this.scheduleParser.fetchSchedule(groupId, currentDate);
            }
            
            const formattedSchedule = this.formatFullSchedule(schedule, `–ì—Ä—É–ø–ø–∞ ${groupName}`);

            // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è inline –∏ regular –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            const inlineKeyboard: TelegramBot.InlineKeyboardMarkup = {
                inline_keyboard: [
                    [
                        { text: "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", callback_data: "prev_day" },
                        { text: "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚û°Ô∏è", callback_data: "next_day" }
                    ]
                ]
            };
            

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–µ–∏–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
            const message = await this.bot.sendMessage(chatId, formattedSchedule, {
                parse_mode: 'HTML',
                reply_markup: { 
                    ...inlineKeyboard,
                    ...this.mainKeyboard 
                }
            });

            if (message) {
                await this.messageManager.addBotMessage(this.bot, chatId, message.message_id);
            }
        } catch (error) {
            console.error('Error fetching other group schedule:', error);
            await this.sendBotMessage(
                chatId,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
        }
    } else {
        await this.sendBotMessage(
            chatId,
            `–ì—Ä—É–ø–ø–∞ "${groupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
        );
    }
}

  private async handleHelp(msg: TelegramBot.Message): Promise<void> {
    const helpText = `
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

üìù <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∏ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É
‚Ä¢ /schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ /other - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã
‚Ä¢ /notifications - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
‚Ä¢ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üì± <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>
‚Ä¢ üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ üìÜ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É - –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
‚Ä¢ üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ

üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ:</b>
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ–±–∞–≤–ª—è—è @${this.botUsername || '–∏–º—è_–±–æ—Ç–∞'}
‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: /schedule@${this.botUsername || '–∏–º—è_–±–æ—Ç–∞'}
‚Ä¢ –ü—Ä–∏ –≤–≤–æ–¥–µ –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1234-1@${this.botUsername || '–∏–º—è_–±–æ—Ç–∞'}

‚öôÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏

‚ùóÔ∏è <b>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö:</b>
‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–≥—É—Ç –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏

üìå <b>–§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç XXXX-X (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1521-2)

üîó <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:</b>
‚Ä¢ GitHub: https://github.com/iNeydlis/Schedule-bot-telegram

`;

    await this.sendBotMessage(msg.chat.id, helpText, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
  }

  private async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const isGroupChat = msg.chat.type === 'group' || msg.chat.type === 'supergroup';

    if (!userId) return;

    const welcomeMessage = isGroupChat 
      ? "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É."
      : "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã.";

    await this.sendBotMessage(chatId, welcomeMessage);
    
    if (!isGroupChat || await this.isUserAdmin(chatId, userId)) {
      await this.sendGroupSelection(chatId, userId, isGroupChat);
    }
  }

  private async isUserAdmin(chatId: number, userId: number): Promise<boolean> {
    try {
      const chatMember = await this.bot.getChatMember(chatId, userId);
      return ['creator', 'administrator'].includes(chatMember.status);
    } catch (error) {
      console.error('Error checking admin status:', error);
      return false;
    }
  }

  private async handleOtherSchedule(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    
    await this.sendBotMessage(
      chatId,
      "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1521-2):"
    );
    
    await this.messageManager.setState(chatId, 'awaiting_other_group');
  }

  private async handleSchedule(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;

    if (!userId) return;

    const userPref = await UserPreferenceModel.findOne({ 
      $or: [
        { userId, chatId },
        { groupChatId: chatId }
      ]
    });

    if (userPref) {
      // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
      const currentDate = new Date();
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Ñ–ª–∞–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      this.dateMap.set(chatId, currentDate);
      this.userSelectedDates.delete(chatId);
      await this.sendSchedule(chatId, userPref.groupId);
    } else {
      await this.sendGroupSelection(chatId, userId, msg.chat.type !== 'private');
    }
}

private async sendSchedule(chatId: number, groupId: string): Promise<void> {
  try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –∏–ª–∏ —Ñ–ª–∞–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      let currentDate = this.userSelectedDates.has(chatId)
          ? (this.dateMap.get(chatId) || new Date())
          : new Date();
      
      let schedule = await this.scheduleParser.fetchSchedule(groupId, currentDate);
      
      // –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–ª–∞–≥–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
      if (!this.userSelectedDates.has(chatId) && (!schedule.lessons || schedule.lessons.length === 0)) {
          currentDate = await this.findNextAvailableDay(currentDate, groupId);
          this.dateMap.set(chatId, currentDate);
          schedule = await this.scheduleParser.fetchSchedule(groupId, currentDate);
      }
      const formattedSchedule = this.formatFullSchedule(schedule);

      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è inline –∏ regular –∫–ª–∞–≤–∏–∞—Ç—É—Ä
      const inlineKeyboard: TelegramBot.InlineKeyboardMarkup = {
          inline_keyboard: [
              [
                  { text: "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", callback_data: "prev_day" },
                  { text: "–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚û°Ô∏è", callback_data: "next_day" }
              ]
          ]
      };

      

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–µ–∏–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
      const message = await this.bot.sendMessage(chatId, formattedSchedule, {
          parse_mode: 'HTML',
          reply_markup: { 
              ...inlineKeyboard,
              ...this.mainKeyboard 
          }
      });

      if (message) {
          await this.messageManager.addBotMessage(this.bot, chatId, message.message_id);
      }
  } catch (error) {
      console.error('Error sending schedule:', error);
      await this.sendBotMessage(
          chatId,
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
  }
}

  private async handleNotifications(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const isGroupChat = msg.chat.type === 'group' || msg.chat.type === 'supergroup';

    if (!userId) return;

    if (isGroupChat && !await this.isUserAdmin(chatId, userId)) {
      await this.sendBotMessage(chatId, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –≥—Ä—É–ø–ø–µ.');
      return;
    }

    const userPref = await UserPreferenceModel.findOne({
      $or: [
        { userId, chatId },
        { groupChatId: chatId }
      ]
    });

    if (userPref) {
      userPref.notifications = !userPref.notifications;
      await userPref.save();
      
      await this.sendBotMessage(
        chatId,
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${userPref.notifications ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`
      );
    } else {
      await this.sendBotMessage(
        chatId,
        '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start'
      );
    }
  }

  private isGroupInput(text: string): boolean {
    return /^\d{4}-(\d{1}|[–ê-–ØA-Z]{2})$/.test(text.toUpperCase());
  }

  private async handleGroupInput(msg: TelegramBot.Message, groupName: string): Promise<void> {
    const chatId = msg.chat.id;
    const userId = msg.from?.id;
    const isGroupChat = msg.chat.type === 'group' || msg.chat.type === 'supergroup';

    if (!userId) return;

    if (isGroupChat && !await this.isUserAdmin(chatId, userId)) {
      await this.sendBotMessage(chatId, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É.');
      return;
    }

    const groupNameNormalized = groupName.toUpperCase();
    if (groupMap[groupNameNormalized]) {
      const groupId = groupMap[groupNameNormalized];
      await this.saveUserGroup(userId, chatId, groupId, isGroupChat);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
      await this.messageManager.setState(chatId, null);
      await this.sendBotMessage(chatId, `–ì—Ä—É–ø–ø–∞ ${groupName} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!`);
      await this.sendSchedule(chatId, groupId);
    } else {
      await this.sendBotMessage(chatId, `–ì—Ä—É–ø–ø–∞ "${groupName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
      await this.sendGroupSelection(chatId, userId, isGroupChat);
    }
  }

  private async sendGroupSelection(chatId: number, userId: number, isGroupChat: boolean): Promise<void> {
    if (isGroupChat && !await this.isUserAdmin(chatId, userId)) {
      await this.sendBotMessage(chatId, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É.');
      return;
    }

    await this.sendBotMessage(
      chatId, 
      isGroupChat 
        ? "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—Å–µ–≥–æ —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1521-2):"
        : "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1521-2):"
    );
  }

  private async saveUserGroup(
    userId: number, 
    chatId: number, 
    groupId: string, 
    isGroupChat: boolean
): Promise<void> {
    try {
        const query = isGroupChat ? { groupChatId: chatId } : { userId, chatId };
        const updateData = {
            userId,
            chatId,
            groupId,
            isGroupChat,
            ...(isGroupChat && { groupChatId: chatId }),
            updatedAt: new Date()
        };

        console.log('Saving user group:', { query, updateData });

        const result = await UserPreferenceModel.findOneAndUpdate(
            query,
            updateData,
            { upsert: true, new: true }
        );

        console.log('Save result:', result);
    } catch (error) {
        console.error('Error saving user group:', error);
        throw error;
    }
}

private async handleDayNavigation(chatId: number, userId: number, direction: string): Promise<void> {
  const userPref = await UserPreferenceModel.findOne({
    $or: [
      { userId, chatId },
      { groupChatId: chatId }
    ]
  });
  
  if (!userPref) return;

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –≤–º–µ—Å—Ç–æ userId –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    const currentDate = this.dateMap.get(chatId) || new Date();
    
    const nextDate = new Date(currentDate);
    do {
      if (direction === 'next_day') {
        nextDate.setDate(nextDate.getDate() + 1);
      } else {
        nextDate.setDate(nextDate.getDate() - 1);
      }
    } while (nextDate.getDay() === 0 || nextDate.getDay() === 6);

    const schedule = await this.scheduleParser.fetchSchedule(userPref.groupId, nextDate);
    
    if (schedule.lessons && schedule.lessons.length > 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è chatId
      this.dateMap.set(chatId, nextDate);
      await this.sendSchedule(chatId, userPref.groupId);
    } else {
      const nextAvailableDate = await this.findNextAvailableDay(
        nextDate,
        userPref.groupId,
        direction === 'next_day' ? 'forward' : 'backward'
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏—Å–ø–æ–ª—å–∑—É—è chatId
      this.dateMap.set(chatId, nextAvailableDate);
      await this.sendSchedule(chatId, userPref.groupId);
    }

  } catch (error) {
    console.error('Error in handleDayNavigation:', error);
    await this.sendBotMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

private async getNextTwoWeeks(): Promise<Date[]> {
  const dates: Date[] = [];
  const today = new Date();
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
  const startDate = new Date(today);
  const currentDayOfWeek = startDate.getDay();
  const daysUntilEndOfWeek = 7 - currentDayOfWeek;
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã
  const allDates: Date[] = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
  for (let i = 0; i <= daysUntilEndOfWeek; i++) {
    const date = new Date(startDate);
    date.setDate(date.getDate() + i);
    allDates.push(date);
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
  const nextMonday = new Date(startDate);
  nextMonday.setDate(startDate.getDate() + (8 - currentDayOfWeek));
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
  for (let i = 0; i < 7; i++) {
    const date = new Date(nextMonday);
    date.setDate(date.getDate() + i);
    allDates.push(date);
  }
  
  return allDates;
}

private async sendDateSelection(chatId: number): Promise<void> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
    const userPref = await UserPreferenceModel.findOne({
      $or: [
        { chatId },
        { groupChatId: chatId }
      ]
    });

    if (!userPref) {
      await this.sendBotMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start");
      return;
    }

    const dates = await this.getNextTwoWeeks();
    const dateButtons: { date: Date; hasLessons: boolean }[] = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    for (const date of dates) {
      try {
        const schedule = await this.scheduleParser.fetchSchedule(userPref.groupId, date);
        const hasLessons = schedule.lessons && schedule.lessons.length > 0;
        dateButtons.push({ date, hasLessons });
      } catch (error) {
        console.error(`Error fetching schedule for date ${date}:`, error);
        dateButtons.push({ date, hasLessons: false });
      }
    }

    const keyboard = {
      inline_keyboard: dateButtons.map(({ date, hasLessons }) => [{
        text: this.formatDateButton(date, hasLessons),
        callback_data: `date_${date.toISOString()}`
      }])
    };

    await this.sendBotMessage(
      chatId,
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:\nüìö - –µ—Å—Ç—å –ø–∞—Ä—ã\n‚≠ïÔ∏è - –Ω–µ—Ç –ø–∞—Ä",
      { reply_markup: keyboard }
    );
  } catch (error) {
    console.error('Error in sendDateSelection:', error);
    await this.sendBotMessage(
      chatId,
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

private formatDateButton(date: Date, hasLessons: boolean): string {
  const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
  const dayOfWeek = days[date.getDay()];
  const dateText = date.toLocaleDateString('ru-RU');
  const icon = hasLessons ? 'üìö' : '‚≠ïÔ∏è';
  return `${dateText} (${dayOfWeek}) ${icon}`;
}

  private async handleCallbackQuery(query: TelegramBot.CallbackQuery): Promise<void> {
    if (!query.message || !query.from.id) return;

    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    if (!data) return;

    try {
      switch (true) {
        case data.startsWith('date_'):
          await this.handleDateSelection(chatId, userId, data.replace('date_', ''));
          break;
        case data === 'next_day':
        case data === 'prev_day':
          await this.handleDayNavigation(chatId, userId, data);
          break;
      }

      await this.bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('Error handling callback query:', error);
      await this.sendBotMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      await this.bot.answerCallbackQuery(query.id);
    }
  }
  private async handleDateSelection(chatId: number, userId: number, dateStr: string): Promise<void> {
    const userPref = await UserPreferenceModel.findOne({
      $or: [
        { userId, chatId },
        { groupChatId: chatId }
      ]
    });

    if (!userPref) return;

    const selectedDate = new Date(dateStr);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
    this.dateMap.set(chatId, selectedDate);
    this.userSelectedDates.add(chatId);
    await this.sendSchedule(chatId, userPref.groupId);
}

  private async findNextAvailableDay(
    startDate: Date,
    groupId: string,
    direction: 'forward' | 'backward' = 'forward'
  ): Promise<Date> {
    try {
      let currentDate = new Date(startDate);
      const maxDays = 14;
      const batchSize = 3;
      let attempts = 0;

      while (currentDate.getDay() === 0 || currentDate.getDay() === 6) {
        if (direction === 'forward') {
          currentDate.setDate(currentDate.getDate() + 1);
        } else {
          currentDate.setDate(currentDate.getDate() - 1);
        }
      }

      while (attempts < maxDays) {
        const datesToCheck: Date[] = [];
        let tempDate = new Date(currentDate);

        while (datesToCheck.length < batchSize && attempts < maxDays) {
          if (tempDate.getDay() !== 0 && tempDate.getDay() !== 6) {
            datesToCheck.push(new Date(tempDate));
            attempts++;
          }
          if (direction === 'forward') {
            tempDate.setDate(tempDate.getDate() + 1);
          } else {
            tempDate.setDate(tempDate.getDate() - 1);
          }
        }

        if (datesToCheck.length === 0) break;

        const schedulePromises = datesToCheck.map(date => 
          this.scheduleParser.fetchSchedule(groupId, date)
        );

        const schedules = await Promise.all(schedulePromises);

        for (let i = 0; i < schedules.length; i++) {
          if (schedules[i].lessons && schedules[i].lessons.length > 0) {
            return datesToCheck[i];
          }
        }

        currentDate = new Date(tempDate);
      }

      return startDate;

    } catch (error) {
      console.error('Error in findNextAvailableDay:', error);
      return startDate;
    }
  }

  private formatFullSchedule(schedule: Schedule, groupTitle?: string): string {
    const hasLessons = schedule.lessons && Array.isArray(schedule.lessons) && schedule.lessons.length > 0;
    
    let message = '';
    if (groupTitle) {
      message += `üë• <b>${groupTitle}</b>\n`;
    }
    message += `üìÖ <b>${schedule.date} (${schedule.dayOfWeek})</b>\n\n`;
    
    if (!hasLessons) {
      message += 'üì¢ <i>–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–Ω—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>\n';
      message += `\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}</i>`;
      return message;
    }

    const defaultLessons = [
      { time: "8:30-10:00", number: 1 },
      { time: "10:10-11:40", number: 2 },
      { time: "12:10-13:40", number: 3 },
      { time: "13:50-15:20", number: 4 },
      { time: "15:30-17:00", number: 5 },
      { time: "17:10-18:40", number: 6 }
    ];

    defaultLessons.forEach(defaultLesson => {
      const lesson = schedule.lessons?.find(l => l.number === defaultLesson.number);
      
      message += `${defaultLesson.number}. ‚è∞ <b>${defaultLesson.time}</b>\n`;
      
      if (lesson) {
        message += `üìö ${lesson.subject}\n`;
        message += `üë©‚Äçüè´ ${lesson.teacher}\n`;
        message += `üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${lesson.room}\n`;
      } else {
        message += `‚ùå –ù–µ—Ç –ø–∞—Ä—ã\n`;
      }
      message += '\n';
    });

    message += `\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}</i>`;
    return message;
  }
}